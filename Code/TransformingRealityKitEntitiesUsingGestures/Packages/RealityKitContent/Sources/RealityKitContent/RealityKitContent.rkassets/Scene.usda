#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Sphere", "Cube", "Cube_2", "Cone", "Cone_1", "Cylinder", "Cube_3", "Cone_2", "GridMaterialOrange", "GridMaterialBlue", "GridMaterialRed", "GridMaterialPink", "GridMaterialGreen", "GridMaterialYellow", "GridMaterialBeige", "GridMaterialCyan"]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )
    float3 xformOp:translate = (0, -0.23641005, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Sphere "Sphere" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/GridMaterialGreen/GridMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-0.17513424, -0.15011734, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                float radius = 0.1
                token shapeType = "Sphere"
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitCustomComponent "RealityKitContent_GestureComponent"
        {
            bool canDrag = 0
            bool canRotate = 0
            uniform token info:id = "RealityKitContent.GestureComponent"
        }
    }

    def "GridMaterialBlue" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        reorder nameChildren = ["GridMaterial", "GridMaterial_Red", "GridMaterial_Green"]
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "GridMaterial"
        {
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "MaterialXPreviewSurface"
            {
                float inputs:metallic = 0.65
                float2 ui:nodegraph:node:size = (207.5, 307)
                int ui:nodegraph:node:stackingOrder = 1366
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["Advanced", "inputs:metallic"]
            }

            over "Remap"
            {
                float2 ui:nodegraph:node:size = (94, 181)
            }

            over "Fractional"
            {
                float2 ui:nodegraph:node:size = (154.5, 109)
            }

            over "Multiply"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "Combine3"
            {
                float2 ui:nodegraph:node:size = (145, 54)
            }

            over "Subtract"
            {
                float2 ui:nodegraph:node:size = (61.5, 36)
            }

            over "Absval"
            {
                float2 ui:nodegraph:node:size = (121.5, 53)
            }

            over "BaseColor"
            {
                color3f inputs:value = (0.12640432, 0.38441694, 0.89737034) (
                    colorSpace = "srgb_displayp3"
                )
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 1365
            }

            over "LineColor"
            {
                float2 ui:nodegraph:node:size = (151, 53)
            }

            over "Texcoord"
            {
                float2 ui:nodegraph:node:size = (180.5, 53)
            }

            over "LineCounts"
            {
                float2 ui:nodegraph:node:size = (151.5, 53)
            }

            over "LineWidths"
            {
                float2 ui:nodegraph:node:size = (150, 53)
            }

            over "Separate2"
            {
                float2 ui:nodegraph:node:size = (115, 127)
            }

            over "Min"
            {
                float2 ui:nodegraph:node:size = (113, 40)
            }

            over "Range"
            {
                float2 ui:nodegraph:node:size = (98, 217)
            }
        }
    }

    def Xform "GridMaterialRed" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        over "GridMaterial"
        {
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "MaterialXPreviewSurface"
            {
                float2 ui:nodegraph:node:size = (207.5, 307)
            }

            over "Remap"
            {
                float2 ui:nodegraph:node:size = (94, 181)
            }

            over "Fractional"
            {
                float2 ui:nodegraph:node:size = (154.5, 109)
            }

            over "Multiply"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "Combine3"
            {
                float2 ui:nodegraph:node:size = (145, 54)
            }

            over "Subtract"
            {
                float2 ui:nodegraph:node:size = (61.5, 36)
            }

            over "Absval"
            {
                float2 ui:nodegraph:node:size = (121.5, 53)
            }

            over "BaseColor"
            {
                color3f inputs:value = (0.89737034, 0.14246908, 0.11263617) (
                    colorSpace = "srgb_displayp3"
                )
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 1365
            }

            over "LineColor"
            {
                float2 ui:nodegraph:node:size = (151, 53)
            }

            over "Texcoord"
            {
                float2 ui:nodegraph:node:size = (180.5, 53)
            }

            over "LineCounts"
            {
                float2 ui:nodegraph:node:size = (151.5, 53)
            }

            over "LineWidths"
            {
                float2 ui:nodegraph:node:size = (150, 53)
            }

            over "Separate2"
            {
                float2 ui:nodegraph:node:size = (115, 127)
            }

            over "Min"
            {
                float2 ui:nodegraph:node:size = (113, 40)
            }

            over "Range"
            {
                float2 ui:nodegraph:node:size = (98, 217)
            }
        }
    }

    def Xform "GridMaterialGreen" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        over "GridMaterial"
        {
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "MaterialXPreviewSurface"
            {
                float2 ui:nodegraph:node:size = (207.5, 307)
            }

            over "Remap"
            {
                float2 ui:nodegraph:node:size = (94, 181)
            }

            over "Fractional"
            {
                float2 ui:nodegraph:node:size = (154.5, 109)
            }

            over "Multiply"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "Combine3"
            {
                float2 ui:nodegraph:node:size = (145, 54)
            }

            over "Subtract"
            {
                float2 ui:nodegraph:node:size = (61.5, 36)
            }

            over "Absval"
            {
                float2 ui:nodegraph:node:size = (121.5, 53)
            }

            over "BaseColor"
            {
                color3f inputs:value = (0.1828714, 0.7903713, 0.3175449) (
                    colorSpace = "srgb_displayp3"
                )
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 1365
            }

            over "LineColor"
            {
                float2 ui:nodegraph:node:size = (151, 53)
            }

            over "Texcoord"
            {
                float2 ui:nodegraph:node:size = (180.5, 53)
            }

            over "LineCounts"
            {
                float2 ui:nodegraph:node:size = (151.5, 53)
            }

            over "LineWidths"
            {
                float2 ui:nodegraph:node:size = (150, 53)
            }

            over "Separate2"
            {
                float2 ui:nodegraph:node:size = (115, 127)
            }

            over "Min"
            {
                float2 ui:nodegraph:node:size = (113, 40)
            }

            over "Range"
            {
                float2 ui:nodegraph:node:size = (98, 217)
            }
        }
    }

    def Xform "GridMaterialYellow" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        reorder nameChildren = ["GridMaterial_1", "GridMaterial"]
        float3 xformOp:translate = (0, 0.0023895502, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "GridMaterial"
        {
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "MaterialXPreviewSurface"
            {
                float2 ui:nodegraph:node:size = (207.5, 307)
            }

            over "Remap"
            {
                float2 ui:nodegraph:node:size = (94, 181)
            }

            over "Fractional"
            {
                float2 ui:nodegraph:node:size = (154.5, 109)
            }

            over "Multiply"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "Combine3"
            {
                float2 ui:nodegraph:node:size = (145, 54)
            }

            over "Subtract"
            {
                float2 ui:nodegraph:node:size = (61.5, 36)
            }

            over "Absval"
            {
                float2 ui:nodegraph:node:size = (121.5, 53)
            }

            over "BaseColor"
            {
                color3f inputs:value = (0.89737034, 0.8650384, 0.21495987) (
                    colorSpace = "srgb_displayp3"
                )
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 1365
            }

            over "LineColor"
            {
                float2 ui:nodegraph:node:size = (151, 53)
            }

            over "Texcoord"
            {
                float2 ui:nodegraph:node:size = (180.5, 53)
            }

            over "LineCounts"
            {
                float2 ui:nodegraph:node:size = (151.5, 53)
            }

            over "LineWidths"
            {
                float2 ui:nodegraph:node:size = (150, 53)
            }

            over "Separate2"
            {
                float2 ui:nodegraph:node:size = (115, 127)
            }

            over "Min"
            {
                float2 ui:nodegraph:node:size = (113, 40)
            }

            over "Range"
            {
                float2 ui:nodegraph:node:size = (98, 217)
            }
        }
    }

    def Cube "Cube" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/GridMaterialYellow/GridMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.8763848, 0.8763848, 0.8763848)
        float3 xformOp:translate = (-0.35712457, 0.4642389, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitCustomComponent "RealityKitContent_GestureComponent"
        {
            uniform token info:id = "RealityKitContent.GestureComponent"
            bool preserveOrientationOnDrag = 0
        }
    }

    def Cylinder "Cylinder" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform token axis = "Y"
        double height = 0.2
        rel material:binding = </Root/GridMaterialBlue/GridMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        float3 xformOp:translate = (0.17486575, -0.15011734, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitCustomComponent "RealityKitContent_GestureComponent"
        {
            bool canDrag = 0
            bool canScale = 0
            uniform token info:id = "RealityKitContent.GestureComponent"
        }
    }

    def Cube "Cube_2" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/GridMaterialOrange/GridMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.8763848, 0.8763848, 0.8763848)
        float3 xformOp:translate = (0.00031147897, 0.4642389, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitCustomComponent "RealityKitContent_GestureComponent"
        {
            uniform token info:id = "RealityKitContent.GestureComponent"
            bool pivotOnDrag = 1
            bool preserveOrientationOnDrag = 1
            bool rotateOnDrag = 0
        }
    }

    def Xform "GridMaterialOrange" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0.0023895502, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "GridMaterial"
        {
            token outputs:mtlx:surface.connect = </Root/GridMaterialOrange/GridMaterial/MaterialXPreviewSurface.outputs:out>
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "MaterialXPreviewSurface"
            {
                color3f inputs:diffuseColor.connect = </Root/GridMaterialOrange/GridMaterial/Remap.outputs:out>
                float2 ui:nodegraph:node:size = (207.5, 307)
            }

            over "Remap"
            {
                color3f inputs:in.connect = </Root/GridMaterialOrange/GridMaterial/Combine3.outputs:out>
                color3f inputs:outhigh.connect = </Root/GridMaterialOrange/GridMaterial/BaseColor.outputs:out>
                color3f inputs:outlow.connect = </Root/GridMaterialOrange/GridMaterial/LineColor.outputs:out>
                float2 ui:nodegraph:node:size = (94, 181)
            }

            over "Fractional"
            {
                float2 inputs:in.connect = </Root/GridMaterialOrange/GridMaterial/Multiply.outputs:out>
                float2 ui:nodegraph:node:size = (154.5, 109)
            }

            over "Multiply"
            {
                float2 inputs:in1.connect = </Root/GridMaterialOrange/GridMaterial/Texcoord.outputs:out>
                float2 inputs:in2.connect = </Root/GridMaterialOrange/GridMaterial/LineCounts.outputs:out>
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "Combine3"
            {
                float inputs:in1.connect = </Root/GridMaterialOrange/GridMaterial/Min.outputs:out>
                float inputs:in2.connect = </Root/GridMaterialOrange/GridMaterial/Min.outputs:out>
                float inputs:in3.connect = </Root/GridMaterialOrange/GridMaterial/Min.outputs:out>
                float2 ui:nodegraph:node:size = (145, 54)
            }

            over "Subtract"
            {
                float2 inputs:in1.connect = </Root/GridMaterialOrange/GridMaterial/Fractional.outputs:out>
                float2 inputs:in2.connect = </Root/GridMaterialOrange/GridMaterial/LineWidths.outputs:out>
                float2 ui:nodegraph:node:size = (61.5, 36)
            }

            over "Absval"
            {
                float2 inputs:in.connect = </Root/GridMaterialOrange/GridMaterial/Subtract.outputs:out>
                float2 ui:nodegraph:node:size = (121.5, 53)
            }

            over "BaseColor"
            {
                color3f inputs:value = (0.89737034, 0.5679608, 0.3063695) (
                    colorSpace = "srgb_displayp3"
                )
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 1366
            }

            over "LineColor"
            {
                float2 ui:nodegraph:node:size = (151, 53)
            }

            over "Texcoord"
            {
                float2 ui:nodegraph:node:size = (180.5, 53)
            }

            over "LineCounts"
            {
                float2 ui:nodegraph:node:size = (151.5, 53)
            }

            over "LineWidths"
            {
                float2 ui:nodegraph:node:size = (150, 53)
            }

            over "Separate2"
            {
                float2 inputs:in.connect = </Root/GridMaterialOrange/GridMaterial/Range.outputs:out>
                float2 ui:nodegraph:node:size = (115, 127)
            }

            over "Min"
            {
                float inputs:in1.connect = </Root/GridMaterialOrange/GridMaterial/Separate2.outputs:outx>
                float inputs:in2.connect = </Root/GridMaterialOrange/GridMaterial/Separate2.outputs:outy>
                float2 ui:nodegraph:node:size = (113, 40)
            }

            over "Range"
            {
                float2 inputs:in.connect = </Root/GridMaterialOrange/GridMaterial/Absval.outputs:out>
                float2 inputs:inhigh.connect = </Root/GridMaterialOrange/GridMaterial/LineWidths.outputs:out>
                float2 ui:nodegraph:node:size = (98, 217)
            }
        }
    }

    def Xform "GridMaterialPink" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "GridMaterial"
        {
            token outputs:mtlx:surface.connect = </Root/GridMaterialPink/GridMaterial/MaterialXPreviewSurface.outputs:out>
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "MaterialXPreviewSurface"
            {
                color3f inputs:diffuseColor.connect = </Root/GridMaterialPink/GridMaterial/Remap.outputs:out>
                float2 ui:nodegraph:node:size = (207.5, 307)
            }

            over "Remap"
            {
                color3f inputs:in.connect = </Root/GridMaterialPink/GridMaterial/Combine3.outputs:out>
                color3f inputs:outhigh.connect = </Root/GridMaterialPink/GridMaterial/BaseColor.outputs:out>
                color3f inputs:outlow.connect = </Root/GridMaterialPink/GridMaterial/LineColor.outputs:out>
                float2 ui:nodegraph:node:size = (94, 181)
            }

            over "Fractional"
            {
                float2 inputs:in.connect = </Root/GridMaterialPink/GridMaterial/Multiply.outputs:out>
                float2 ui:nodegraph:node:size = (154.5, 109)
            }

            over "Multiply"
            {
                float2 inputs:in1.connect = </Root/GridMaterialPink/GridMaterial/Texcoord.outputs:out>
                float2 inputs:in2.connect = </Root/GridMaterialPink/GridMaterial/LineCounts.outputs:out>
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "Combine3"
            {
                float inputs:in1.connect = </Root/GridMaterialPink/GridMaterial/Min.outputs:out>
                float inputs:in2.connect = </Root/GridMaterialPink/GridMaterial/Min.outputs:out>
                float inputs:in3.connect = </Root/GridMaterialPink/GridMaterial/Min.outputs:out>
                float2 ui:nodegraph:node:size = (145, 54)
            }

            over "Subtract"
            {
                float2 inputs:in1.connect = </Root/GridMaterialPink/GridMaterial/Fractional.outputs:out>
                float2 inputs:in2.connect = </Root/GridMaterialPink/GridMaterial/LineWidths.outputs:out>
                float2 ui:nodegraph:node:size = (61.5, 36)
            }

            over "Absval"
            {
                float2 inputs:in.connect = </Root/GridMaterialPink/GridMaterial/Subtract.outputs:out>
                float2 ui:nodegraph:node:size = (121.5, 53)
            }

            over "BaseColor"
            {
                color3f inputs:value = (0.89737034, 0.12249312, 0.65668297) (
                    colorSpace = "srgb_displayp3"
                )
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 1366
            }

            over "LineColor"
            {
                float2 ui:nodegraph:node:size = (151, 53)
            }

            over "Texcoord"
            {
                float2 ui:nodegraph:node:size = (180.5, 53)
            }

            over "LineCounts"
            {
                float2 ui:nodegraph:node:size = (151.5, 53)
            }

            over "LineWidths"
            {
                float2 ui:nodegraph:node:size = (150, 53)
            }

            over "Separate2"
            {
                float2 inputs:in.connect = </Root/GridMaterialPink/GridMaterial/Range.outputs:out>
                float2 ui:nodegraph:node:size = (115, 127)
            }

            over "Min"
            {
                float inputs:in1.connect = </Root/GridMaterialPink/GridMaterial/Separate2.outputs:outx>
                float inputs:in2.connect = </Root/GridMaterialPink/GridMaterial/Separate2.outputs:outy>
                float2 ui:nodegraph:node:size = (113, 40)
            }

            over "Range"
            {
                float2 inputs:in.connect = </Root/GridMaterialPink/GridMaterial/Absval.outputs:out>
                float2 inputs:inhigh.connect = </Root/GridMaterialPink/GridMaterial/LineWidths.outputs:out>
                float2 ui:nodegraph:node:size = (98, 217)
            }
        }
    }

    def Cube "Cube_3" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/GridMaterialBeige/GridMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double size = 0.2
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.8763848, 0.8763848, 0.8763848)
        float3 xformOp:translate = (0.34668162, 0.4642389, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.2, 0.2)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitCustomComponent "RealityKitContent_GestureComponent"
        {
            uniform token info:id = "RealityKitContent.GestureComponent"
            bool pivotOnDrag = 0
            bool preserveOrientationOnDrag = 0
            bool rotateOnDrag = 0
        }
    }

    def Xform "GridMaterialBeige" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "GridMaterial"
        {
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "MaterialXPreviewSurface"
            {
                float2 ui:nodegraph:node:size = (207.5, 307)
            }

            over "Remap"
            {
                float2 ui:nodegraph:node:size = (94, 181)
            }

            over "Fractional"
            {
                float2 ui:nodegraph:node:size = (154.5, 109)
            }

            over "Multiply"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "Combine3"
            {
                float2 ui:nodegraph:node:size = (145, 54)
            }

            over "Subtract"
            {
                float2 ui:nodegraph:node:size = (61.5, 36)
            }

            over "Absval"
            {
                float2 ui:nodegraph:node:size = (121.5, 53)
            }

            over "BaseColor"
            {
                color3f inputs:value = (0.89737034, 0.8826304, 0.7251857) (
                    colorSpace = "srgb_displayp3"
                )
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 1457
            }

            over "LineColor"
            {
                float2 ui:nodegraph:node:size = (151, 53)
            }

            over "Texcoord"
            {
                float2 ui:nodegraph:node:size = (180.5, 53)
            }

            over "LineCounts"
            {
                float2 ui:nodegraph:node:size = (151.5, 53)
            }

            over "LineWidths"
            {
                float2 ui:nodegraph:node:size = (150, 53)
            }

            over "Separate2"
            {
                float2 ui:nodegraph:node:size = (115, 127)
            }

            over "Min"
            {
                float2 ui:nodegraph:node:size = (113, 40)
            }

            over "Range"
            {
                float2 ui:nodegraph:node:size = (98, 217)
            }
        }
    }

    def Xform "GridMaterialCyan" (
        active = true
        references = [
            @Materials/GridMaterial.usda@,
            @Materials/GridMaterial.usda@</Root/GridMaterial>
        ]
    )
    {
        over "GridMaterial"
        {
            float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

            over "MaterialXPreviewSurface"
            {
                float2 ui:nodegraph:node:size = (207.5, 307)
            }

            over "Remap"
            {
                float2 ui:nodegraph:node:size = (94, 181)
            }

            over "Fractional"
            {
                float2 ui:nodegraph:node:size = (154.5, 109)
            }

            over "Multiply"
            {
                float2 ui:nodegraph:node:size = (60, 36)
            }

            over "Combine3"
            {
                float2 ui:nodegraph:node:size = (145, 54)
            }

            over "Subtract"
            {
                float2 ui:nodegraph:node:size = (61.5, 36)
            }

            over "Absval"
            {
                float2 ui:nodegraph:node:size = (121.5, 53)
            }

            over "BaseColor"
            {
                color3f inputs:value = (0.23003794, 0.8650209, 0.89737034) (
                    colorSpace = "srgb_displayp3"
                )
                float2 ui:nodegraph:node:size = (151, 53)
                int ui:nodegraph:node:stackingOrder = 1365
            }

            over "LineColor"
            {
                float2 ui:nodegraph:node:size = (151, 53)
            }

            over "Texcoord"
            {
                float2 ui:nodegraph:node:size = (180.5, 53)
            }

            over "LineCounts"
            {
                float2 ui:nodegraph:node:size = (151.5, 53)
            }

            over "LineWidths"
            {
                float2 ui:nodegraph:node:size = (150, 53)
            }

            over "Separate2"
            {
                float2 ui:nodegraph:node:size = (115, 127)
            }

            over "Min"
            {
                float2 ui:nodegraph:node:size = (113, 40)
            }

            over "Range"
            {
                float2 ui:nodegraph:node:size = (98, 217)
            }
        }
    }

    def Capsule "Capsule" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, -1.5710269)
        }
    )
    {
        uniform token axis = "Y"
        double height = 0.2
        rel material:binding = </Root/GridMaterialRed/GridMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (0.70702523, 0, 0, -0.7071883)
        float3 xformOp:scale = (0.58941495, 0.58941495, 0.58941495)
        float3 xformOp:translate = (-0.37543285, 0.15895246, 1.3783574e-7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:surface.connect = </Root/Capsule/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.4, 0.20000002)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, 0, -3.7252903e-9)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitCustomComponent "RealityKitContent_GestureComponent"
        {
            bool canRotate = 0
            bool canScale = 0
            uniform token info:id = "RealityKitContent.GestureComponent"
            bool preserveOrientationOnDrag = 0
        }
    }

    def Capsule "Capsule_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, -1.5710269)
        }
    )
    {
        uniform token axis = "Y"
        double height = 0.2
        rel material:binding = </Root/GridMaterialPink/GridMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (0.7070253, 0, 0, -0.70718825)
        float3 xformOp:scale = (0.58941483, 0.58941483, 0.58941483)
        float3 xformOp:translate = (-0.014312059, 0.15886901, 2.4144538e-7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/Capsule_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.4, 0.20000002)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, 0, -3.7252903e-9)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitCustomComponent "RealityKitContent_GestureComponent"
        {
            bool canRotate = 0
            bool canScale = 0
            uniform token info:id = "RealityKitContent.GestureComponent"
            bool preserveOrientationOnDrag = 1
        }
    }

    def Capsule "Capsule_2" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (0, 0, -1.5710267)
        }
    )
    {
        uniform token axis = "Y"
        double height = 0.2
        rel material:binding = </Root/GridMaterialCyan/GridMaterial> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 0.1
        quatf xformOp:orient = (0.7070253, 0, 0, -0.7071882)
        float3 xformOp:scale = (0.58941483, 0.58941483, 0.58941483)
        float3 xformOp:translate = (0.359111, 0.15878281, 2.8219074e-7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:surface.connect = </Root/Capsule_2/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }

        def RealityKitComponent "Collider"
        {
            uint group = 1
            uniform token info:id = "RealityKit.Collider"
            uint mask = 4294967295
            token type = "Default"

            def RealityKitStruct "Shape"
            {
                float3 extent = (0.2, 0.4, 0.20000002)
                token shapeType = "Box"

                def RealityKitStruct "pose"
                {
                    float3 position = (0, 0, -3.7252903e-9)
                }
            }
        }

        def RealityKitComponent "InputTarget"
        {
            uniform token info:id = "RealityKit.InputTarget"
        }

        def RealityKitCustomComponent "RealityKitContent_GestureComponent"
        {
            bool canRotate = 0
            bool canScale = 0
            uniform token info:id = "RealityKitContent.GestureComponent"
            bool pivotOnDrag = 0
            bool preserveOrientationOnDrag = 0
        }
    }
}

